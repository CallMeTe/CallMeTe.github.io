<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test_my_site</title>
      <link href="/2022/05/27/test-my-site/"/>
      <url>/2022/05/27/test-my-site/</url>
      
        <content type="html"><![CDATA[<p>whoami<br>next door</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro漏洞复习</title>
      <link href="/2022/05/27/test/"/>
      <url>/2022/05/27/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Shiro漏洞详解（shiro加密分析）"><a href="#Shiro漏洞详解（shiro加密分析）" class="headerlink" title="Shiro漏洞详解（shiro加密分析）"></a>Shiro漏洞详解（shiro加密分析）</h2><h3 id="Shiro简介"><a href="#Shiro简介" class="headerlink" title="Shiro简介"></a>Shiro简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apache Shiro是常见的Java安全框架.</span><br><span class="line">执行身份验证、授权、密码和会话管理.</span><br></pre></td></tr></table></figure><h4 id="Shiro漏洞"><a href="#Shiro漏洞" class="headerlink" title="Shiro漏洞"></a>Shiro漏洞</h4><ul><li>Shiro550</li><li>Shiro721</li><li>Shiro权限绕过</li><li>Shiro认证绕过….<h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><h6 id="AES加密解密"><a href="#AES加密解密" class="headerlink" title="AES加密解密"></a>AES加密解密</h6><blockquote><p>AES算法来自于密码学,主要有四种操作处理<br>密钥加法层(Add Round Key)<br>字节代换层(SubByte)<br>行位移层(Shift Rows)<br>列混淆层(Mix Column)<br>具体操作可以看底下的流程图<br>(Ps：如果看不懂就可以理解为把你的明文用特定的密钥加密,这种加密如果有密钥就可以反解密出来)<br><img src="/../images/2022/07/13/3c047d30-0280-11ed-8098-c3db6493b271.png" alt="image.png"></p></blockquote><h5 id="Shiro反序列化漏洞"><a href="#Shiro反序列化漏洞" class="headerlink" title="Shiro反序列化漏洞"></a>Shiro反序列化漏洞</h5><h6 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因:"></a>漏洞成因:</h6></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Apache Shiro框架提供了记住密码的功(RememberMe)</span><br><span class="line">用户登录成功后会生成经过加密并编码的Cookie</span><br><span class="line">在服务端对rememberMe的Cookie值</span><br><span class="line">先base64解码然后AES解密在反序列化</span><br><span class="line">导致了反序列化RCE漏洞。</span><br></pre></td></tr></table></figure><h6 id="Cookie的生成过程以及解密过程"><a href="#Cookie的生成过程以及解密过程" class="headerlink" title="Cookie的生成过程以及解密过程"></a>Cookie的生成过程以及解密过程</h6><p><img src="/../images/2022/07/13/18401b30-027f-11ed-8098-c3db6493b271.png" alt="image.png"></p><h6 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h6><p>Shiro反序列化的特征：在返回包的<strong>Set-Cookie</strong>中存在<strong>rememberMe&#x3D;deleteMe</strong>字段</p><h6 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析:"></a>漏洞分析:</h6><blockquote><p>我们知道漏洞发生在登录过程中,所以我们在他的在org&#x2F;apache&#x2F;shiro&#x2F;mgt&#x2F;DefaultSecurityManager.java中的<br>&#x3D;&#x3D;rememberMeSuccessfulLogin&#x3D;&#x3D;方法下断点。</p></blockquote><p><img src="/../images/2022/07/13/da3b4880-029e-11ed-8098-c3db6493b271.png" alt="IOB2OVAY~IJD8AFD75RXHAV.png"></p><blockquote><p>动态调试运行,发现走到了&#x3D;&#x3D;onSuccessfulLogin&#x3D;&#x3D;方法</p><blockquote><p>跟进&#x3D;&#x3D;onSuccessfulLogin&#x3D;&#x3D;方法</p></blockquote></blockquote><p><img src="/../images/2022/07/13/6a7ad090-02a0-11ed-8098-c3db6493b271.png" alt="QQ图片20220713193900.png"></p><blockquote><p>调用&#x3D;&#x3D;forgetIdentity&#x3D;&#x3D;方法对subject进行处理</p><blockquote><p>跟进&#x3D;&#x3D;forgetIdentity&#x3D;&#x3D;方法</p></blockquote></blockquote><p><img src="/../images/2022/07/13/e8cc3280-02a1-11ed-8098-c3db6493b271.png" alt="QQ图片20220713193900.png"></p><blockquote><p>看到先是获取request和response然后继续调用&#x3D;&#x3D;forgetIdentity&#x3D;&#x3D;,接着跟进</p></blockquote><p><img src="/../images/2022/07/13/263728a0-02a2-11ed-8098-c3db6493b271.png" alt="QQ图片20220713193900.png"></p><blockquote><p>getCookie就是得到cookies,跟进removeFrom方法看一下,其实就是在respons头部设置Set-Cookie:rememberMe&#x3D;deleteMe</p></blockquote><p><img src="/../images/2022/07/13/a60de780-02a2-11ed-8098-c3db6493b271.png" alt="QQ图片20220713193900.png"></p><blockquote><p>返回&#x3D;&#x3D;onSuccessfulLogin&#x3D;&#x3D;方法,走到下面的代码,如果设置了remeberme就进入if判断,发现调用了&#x3D;&#x3D;rememberIdentity&#x3D;&#x3D;方法,跟进….</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (isRememberMe(token)) &#123;</span><br><span class="line">    rememberIdentity(subject, token, info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/2022/07/13/4e195040-02a3-11ed-8098-c3db6493b271.png" alt="image.png"></p><blockquote><p>发现最后调用了&#x3D;&#x3D;rememberIdentity&#x3D;&#x3D;方法接着跟进&#x3D;&#x3D;rememberIdentity&#x3D;&#x3D;</p></blockquote><p><img src="/../images/2022/07/13/722b0460-02a3-11ed-8098-c3db6493b271.png" alt="image.png"></p><blockquote><p>跟进convertPrincipalsToBytes函数</p></blockquote><p><img src="/../images/2022/07/13/a2f9ad30-02a3-11ed-8098-c3db6493b271.png" alt="QQ图片20220713193900.png"></p><blockquote><p>可以看到byte &#x3D; encrypt(bytes)进行了加密,发现了是AES-CBC加密方式,接着跟进&#x3D;&#x3D;encrypt&#x3D;&#x3D;方法</p></blockquote><p><img src="/../images/2022/07/13/58d109a0-02a4-11ed-8098-c3db6493b271.png" alt="image.png"><br><img src="/../images/2022/07/13/2948ea90-02a4-11ed-8098-c3db6493b271.png" alt="QQ图片20220713193900.png"></p><blockquote><p>知道了加密类为CipherService,我们接着看这段代码,发现参数中传了一个方法,跟进&#x3D;&#x3D;getEncryptionCipherKey&#x3D;&#x3D;方法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ByteSource byteSource = cipherService.encrypt(serialized, getEncryptionCipherKey());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/2022/07/13/e54d1680-02a4-11ed-8098-c3db6493b271.png" alt="image.png"></p><blockquote><p>就这样我们找到了加密的密钥,加密完成之后返回&#x3D;&#x3D;rememberIdentity&#x3D;&#x3D;进入&#x3D;&#x3D;rememberSerializedIdentity&#x3D;&#x3D;<br><img src="/../images/2022/07/13/6f2c5870-02a5-11ed-8098-c3db6493b271.png" alt="QQ图片20220713193900.png"><br>跟进&#x3D;&#x3D;rememberSerializedIdentity&#x3D;&#x3D;方法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">protected void rememberSerializedIdentity(Subject subject, byte[] serialized) &#123;</span><br><span class="line"></span><br><span class="line">    if (!WebUtils.isHttp(subject)) &#123;</span><br><span class="line">        if (log.isDebugEnabled()) &#123;</span><br><span class="line">            String msg = &quot;Subject argument is not an HTTP-aware instance.  This is required to obtain a servlet &quot; +</span><br><span class="line">                    &quot;request and response in order to set the rememberMe cookie. Returning immediately and &quot; +</span><br><span class="line">                    &quot;ignoring rememberMe operation.&quot;;</span><br><span class="line">            log.debug(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    HttpServletRequest request = WebUtils.getHttpRequest(subject);</span><br><span class="line">    HttpServletResponse response = WebUtils.getHttpResponse(subject);</span><br><span class="line"></span><br><span class="line">    //base 64 encode it and store as a cookie:</span><br><span class="line">    String base64 = Base64.encodeToString(serialized);</span><br><span class="line"></span><br><span class="line">    Cookie template = getCookie(); //the class attribute is really a template for the outgoing cookies</span><br><span class="line">    Cookie cookie = new SimpleCookie(template);</span><br><span class="line">    cookie.setValue(base64);</span><br><span class="line">    cookie.saveTo(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>对加密的bytes进行base64编码，保存在cookie中</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Shiro漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp使用日记(一)</title>
      <link href="/2022/05/27/Burp%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/"/>
      <url>/2022/05/27/Burp%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Burp安装"><a href="#Burp安装" class="headerlink" title="Burp安装"></a>Burp安装</h2><blockquote><p>简介:<br>Burp Suite 是用于攻击web 应用程序的集成平台，包含了许多工具。BurpSuite为这些工具设计了许多接口，以加快攻击应用程序的过程。</p></blockquote><h3 id="下载Jdk文件"><a href="#下载Jdk文件" class="headerlink" title="下载Jdk文件"></a>下载Jdk文件</h3><p>BurpSuite是一款基于Java开发的工具,所以我们电脑自身也要有Java环境,下载java开发工具包JDK</p><ol><li>只有低版本的Burp需要配置Java,推荐使用1.8版本</li><li>高版本自带了Java环境<br>留下Jdk下载地址，毕竟以后有些工具会用到Java环境<br><a href="https://www.oracle.com/java/technologies/downloads/#java8-windows">点击这里-下载官方1.8J版本dk</a><br><img src="/../images/2022/05/27/fd50b200-dda1-11ec-be54-418db5c1d910.png" alt="image.png"><br>如果你觉得特别费劲,直接跳到Java安装,我配置好了所有的环境,就是有点大。<h3 id="配置Java环境"><a href="#配置Java环境" class="headerlink" title="配置Java环境"></a>配置Java环境</h3></li><li>找到你的此电脑,右键属性</li><li>往下翻找到相关设置,点击里面的高级系统设置</li><li>在高级选项栏,点击环境变量</li><li>在系统环境变量中点击新增</li><li>变量名中输入JAVA_HOME,变量值中输入你Jdk安装目录</li><li>再次新建系统环境变量<br>变量名：<strong>Classpath</strong><br>变量值： <strong>.;%JAVA_HOME%\lib;</strong><br>注意此变量值以<strong>英文句点符号开始，以分号结束</strong></li><li>系统变量里面找到Path变量,点击编辑,添加如下字符串 ;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</li><li>最后打开cmd,输入java -version<br><img src="/../images/2022/05/27/2c165980-dda4-11ec-be54-418db5c1d910.png" alt="image.png"><br>这样输出版本代表Java安装配置成功<h3 id="BurpSuite下载安装"><a href="#BurpSuite下载安装" class="headerlink" title="BurpSuite下载安装"></a>BurpSuite下载安装</h3>我已经上传好压缩包,直接点击BurpSuite.exe就能启动<br><img src="/../images/2022/05/27/e208b0a0-dda7-11ec-be54-418db5c1d910.png" alt="image.png"><br><a href="https://www.aliyundrive.com/s/afKuXRzDQBX">Burp一键配置</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Burp使用日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BurpSuite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深信服安全研究面试题详解</title>
      <link href="/2022/05/27/%E6%B7%B1%E4%BF%A1%E6%9C%8D%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/05/27/%E6%B7%B1%E4%BF%A1%E6%9C%8D%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="框架漏洞"><a href="#框架漏洞" class="headerlink" title="框架漏洞"></a>框架漏洞</h3><ul><li>Shiro</li><li>Fastjson</li><li>struts2</li><li>Weblogic</li><li>Log4j2<h5 id="Shiro框架"><a href="#Shiro框架" class="headerlink" title="Shiro框架"></a>Shiro框架</h5></li></ul><ol><li><p>什么是shiro</p></li><li><p>shiro550</p></li><li><p>shiro721</p></li><li><p>shiro权限绕过</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/27/hello-world/"/>
      <url>/2022/05/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
